//1)Encrypt the string
package InheritanceDemo;

import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.Signature;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;

public class Encryption_Demo {
   public static void main(String args[]) throws Exception{
      
      Signature sign = Signature.getInstance("SHA256withRSA");
      
      
      KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("RSA");
      
      
      keyPairGen.initialize(2048);
      
      
      KeyPair pair = keyPairGen.generateKeyPair();  
      
   
      Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        
      
      cipher.init(Cipher.ENCRYPT_MODE, pair.getPublic());
	  
      
      byte[] input = "Welcome to Tutorialspoint".getBytes();	  
      cipher.update(input);
	  
      
      byte[] cipherText = cipher.doFinal();	 
      System.out.println(new String(cipherText, "UTF8"));
   }
}




//2)Reverse word in a given string
//First file-StringFormatter
package InheritanceDemo;
public class StringFormatter {  
public static String reverseWord(String str){  
    String words[]=str.split("\\s");  
    String reverseWord="";  
    for(String w:words){  
        StringBuilder sb=new StringBuilder(w);  
        sb.reverse();  
        reverseWord+=sb.toString()+" ";  
    }  
    return reverseWord.trim();  
}  
//Second file-TestStrFormatter
package InheritanceDemo;
public class TestStrFormatter {  
public static void main(String[] args) {  
    System.out.println(StringFormatter.reverseWord("geeks quiz practice code"));  
    System.out.println(StringFormatter.reverseWord("I love programming very much"));    
    }  
}  
} 




//3)Length of the longest substring without repeating characters
package InheritanceDemo;

class LengthofLongSubstring{


public static Boolean areDistinct(String str,int i, int j)
{
  
 
 boolean[] visited = new boolean[26];

 for(int k = i; k <= j; k++)
 {
     if (visited[str.charAt(k) - 'a'] == true)
         return false;
          
     visited[str.charAt(k) - 'a'] = true;
 }
 return true;
}


public static int longestUniqueSubsttr(String str)
{
 int n = str.length();
  
 // Result
 int res = 0;
  
 for(int i = 0; i < n; i++)
     for(int j = i; j < n; j++)
         if (areDistinct(str, i, j))
             res = Math.max(res, j - i + 1);
              
 return res;
}

//Driver code
public static void main(String[] args)
{
 String str = "ABDEFGABEF";
 System.out.println("The input string is " + str);
 int len = longestUniqueSubsttr(str);
 
 System.out.println("The length of the longest " +"non-repeating character " +"substring is " + len);
}
}


//4) Find all distinct palindromic sub-strings of a given string
package InheritanceDemo;


import java.util.Map;
import java.util.TreeMap;

public class Palindrome_Demo
{    
 
 static void palindromeSubStrs(String s)
 {
     //map<string, int> m;
     TreeMap<String , Integer> m = new TreeMap<>();
     int n = s.length();
   
     
     int[][] R = new int[2][n+1];
   
     
     s = "@" + s + "#";
     for (int j = 0; j <= 1; j++)
     {
         int rp = 0;   
         R[j][0] = 0;
   
         int i = 1;
         while (i <= n)
         {
             
             while (s.charAt(i - rp - 1) == s.charAt(i + j + rp))
                 rp++;  
             R[j][i] = rp;
             int k = 1;
             while ((R[j][i - k] != rp - k) && (k < rp))
             {
                 R[j][i + k] = Math.min(R[j][i - k],rp - k);
                 k++;
             }
             rp = Math.max(rp - k,0);
             i += k;
         }
     }
    
     s = s.substring(1, s.length()-1);
   
     
     m.put(s.substring(0,1), 1);
     for (int i = 1; i < n; i++)
     {
         for (int j = 0; j <= 1; j++)
             for (int rp = R[j][i]; rp > 0; rp--)
                m.put(s.substring(i - rp - 1,  i - rp - 1 + 2 * rp + j), 1);
         m.put(s.substring(i, i + 1), 1);
     }
   
     
    System.out.println("Below are " + (m.size() + " palindrome sub-strings");
     
    for (Map.Entry<String, Integer> ii:m.entrySet())
       System.out.println(ii.getKey());
 }
   
 
 public static void main(String args[])
 {
     palindromeSubStrs("abaaa");
 }
}

5)Check if two given string isomorphic to each other.
package InheritanceDemo;

import java.io.*;
import java.util.*;
class Isomorphic {
 static int size = 256;

 
 static String areIsomorphic(String str1, String str2)
 {
     int m = str1.length();
     int n = str2.length();
     if (m != n)
         return "False";

     
     Boolean[] marked = new Boolean[size];
     Arrays.fill(marked, Boolean.FALSE);
  
     int[] map = new int[size];
     Arrays.fill(map, -1);

     
     for (int i = 0; i < n; i++) {
         
         if (map[str1.charAt(i)] == -1) {
             
             if (marked[str2.charAt(i)] == true)
                 return "False";

            
             marked[str2.charAt(i)] = true;

             
             map[str1.charAt(i)] = str2.charAt(i);
         }

         
         else if (map[str1.charAt(i)] != str2.charAt(i))
             return "False";
     }

     return "True";
 }

 public static void main(String[] args)
 {
     String res = areIsomorphic("aab", "xxy");
     System.out.println(res);
 }
}
